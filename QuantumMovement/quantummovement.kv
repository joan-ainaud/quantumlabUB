#:import Factory kivy.factory.Factory

<GameCoin>:
    size_hint: None, None
    size: 75, 75
    Image:
        id: image
        source: 'images/coinanimated.gif'
        center_x: self.parent.center_x
        center_y: self.parent.center_y

# We ended up drawing particles directly in matplotlib. Through kivy would be like this for example
#<ClassicalParticle>:
#    size: 25, 25
#    canvas:
#        Ellipse:
#            pos: self.pos
#            size: self.size

<RoundedButton>:
    #Prevents the disabled button text from disappearing
    background_disabled_normal: ''
    #disabled_color: 1,1,1,1

    background_color: 0,0,0,0# the last zero is the critical on, make invisible
    canvas.before:
        Color:
            rgba: (0.4,0.4,0.4,1) if self.state=='normal' else (0,0.7,0.7,1)# visual feedback of press
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: [25,]
#        Color:
 #           rgba: .5, .5, .5, 1
  #      Line:
   #         width: 2
    #        rectangle: self.x, self.y, self.width, self.height
     #       #radius: [20,]

<ImageButton>:
    size_hint_min_y: dp(40)
    background_color: 0, 0, 0, 0
    on_press: self.pressed()
    on_release: self.released()
    Image:
        id: my_image
        fit_mode: "contain"
        source: self.parent.img_src
        center_x: self.parent.center_x
        center_y: self.parent.center_y

<RoundedImageButton>:
    Image:
        id: my_image
        fit_mode: "contain"
        source: self.parent.img_src
        center_x: self.parent.center_x
        center_y: self.parent.center_y

<LightButton>:
    canvas.before:
        Color:
            rgba: 240/255,240/255,240/255,255/255
        Rectangle:
            pos: self.pos
            size: self.size
<LightButtonImage>:
    Image:
        fit_mode: "scale-down"
        source: self.parent.image_src
        center_x: self.parent.center_x
        center_y: self.parent.center_y
        width: self.parent.width*self.parent.size_hint_image
        #allow_stretch: True

<PlayButton>:
#    size_hint_min_y: dp(40)
#    Image:
#        fit_mode: "scale-down"
#        height: dp(40)
#        source: 'images/play.png'
#        center_x: self.parent.center_x
#        center_y: self.parent.center_y
    size_hint_min_y: dp(40)
    background_color: 0, 0, 0, 0
    on_press: self.pressed()
    Image:
        id: my_image
        fit_mode: "scale-down"
        source: 'images/play.png' if self.parent.state is 'normal' else 'images/play_pressed.png'
        center_x: self.parent.center_x
        center_y: self.parent.center_y

#<RestartButton>:
#    size_hint_min_y: dp(40)
#    Image:
#        fit_mode: "scale-down"
#        height: dp(40)
#        source: 'images/restart.png'
#        center_x: self.parent.center_x
#        center_y: self.parent.center_y
#
#<ReturnButton>:
#    size_hint_min_y: dp(40)
#    Image:
#        fit_mode: "contain"
#        height: dp(40)
#        source: 'images/return.png'
#        center_x: self.parent.center_x
#        center_y: self.parent.center_y
#
##<HomeButton>:
##    img_src: 'images/home.png'
#
#<SettingsButton>:
#    size_hint_min_y: dp(40)
#    Image:
#        fit_mode: "scale-down"
#        height: dp(40)
#        source: 'images/settings.png'
#        center_x: self.parent.center_x
#        center_y: self.parent.center_y
#
#<InfoButton>:
#    size_hint_min_y: dp(40)
#    Image:
#        fit_mode: "scale-down"
#        height: 100
#        source: 'images/info.png'
#        center_x: self.parent.center_x
#        center_y: self.parent.center_y
#
#<SaveButton>:
#    size_hint_min_y: dp(40)
#    Image:
#        fit_mode: "scale-down"
#        height: dp(40)
#        source: 'images/save.png'
#        center_x: self.parent.center_x
#        center_y: self.parent.center_y

<DataInput>:
    multiline: False
    on_text: self.update_padding() if self.centered else None
    padding: [(self.width - self.text_width) / 2,self.height/2-18] if self.centered else [6,self.height/2-18]

<CustomDataSlider>:
    #size: root.width, root.height

<ColoredGridLayout>:
    canvas.before:
        Color:
            rgba: (240/255, 240/255, 240/255, 1)
        Rectangle:
            pos: self.pos
            size: self.size

<ColoredBoxLayout>:
    canvas.before:
        Color:
            rgba: (240/255, 240/255, 240/255, 1)
        Rectangle:
            pos: self.pos
            size: self.size


<FunctionInput>:
    #multiline: False

<StateExpression>
    multiline: False

<TextPopup>:
    title: ""
    auto_dismiss: True
    size_hint: 0.4, 0.2

<BoolCheckBox>:
    size_hint: None, None
    color: [0., 1., 0., 1.]  # Green Checkmark
    size: 35, 35

<Checkbox>
    canvas.before:
        Color:
            rgb: .8,0.8,0.8
        Rectangle:
            pos:self.center_x-16, self.center_y-16
            size:[32,32]
        #Color:
        #    rgb: 1,1,1
        #Rectangle:
        #    pos:self.center_x-14, self.center_y-14
        #    size:[28,28]

<PlotPopup>:
    title: ""
    auto_dismiss: True
    size_hint:  0.5, 0.5

<SavedStatesPopup>:
    auto_dismiss: True
    title: "Estats guardats"
    size_hint: 0.75, 0.75
    BoxLayout:
        orientation: "vertical"
        GridLayout:
            padding: sp(5), 0
            cols: 3
            size_hint: 1, None
            height: sp(50)
            TextInput:
                size_hint_x: 0.15
                id: stateName
                multiline: False
                text: "nouEstat"
                on_text_validate:
            StateExpression:
                id: stateCreator
                holder: root
                varDict: root.window.variablesDict
            Button:
                size_hint_x: 0.15
                text: "Crea\nEstat"
                on_release:
                    stateCreator.on_text_validate()


        ScrollView:
            #do_scroll_x: False
            #do_scroll_y: True
            GridLayout:
                cols: 5
                size_hint_y: None
                height: self.minimum_height
                spacing: 10
                #row_force_default: True
                row_default_height: 100
                id: states

<SavedEigenstatesPopup>:
    auto_dismiss: True
    title: "Estats pròpis guardats"
    size_hint: 0.75, 0.75
    BoxLayout:
        orientation: "vertical"
        GridLayout:
            size_hint_y: None
            height: 100
            cols: 3
            GridLayout:
                cols: 2
                Label:
                    halign: "center"
                    text: "tol\n| H|p>/E - |p> | < tol"
                DataInput:
                    id: tol
                    holder: root
                    attribute: "tol"
                    condition: "positive"
                    scientific: True
            GridLayout:
                size_hint_x: 0.7
                cols:2
                Label:
                    halign: "center"
                    text: "max\niteracions"
                DataInput:
                    size_hint_x: 0.4
                    id: maxIter
                    holder: root
                    attribute: "maxiter"
                    condition: "positive"
            Button:
                id: eigenButton
                size_hint_x: 0.6
                text: "Busca següent\nEigenstat"
                on_release:
                    root.eigenFind()
                    #root.window.QSystem.approximateEigenstate(tol=root.tol,maxiter=root.maxiter, callback=root.callback)
                    #root.window.animation.manualUpdate(onlyDraw=True)
                    #root.dismiss()
        ProgressBar:
            id: progress
            size_hint_y: None
            height: 25

        ScrollView:
            #do_scroll_x: False
            #do_scroll_y: True
            GridLayout:
                cols: 5
                size_hint_y: None
                height: self.minimum_height
                spacing: 10
                #row_force_default: True
                row_default_height: 100
                id: states

<GlobalVariable>:
    #size_hint: 1, 1

<GlobalVariablesPopup>:
    auto_dismiss: True
    size_hint_x: 0.8
    size_hint_y: 0.8
    title: "Paràmetres/Variables : Nom - Valor"

<Label>:
    #markup: True


<ColoredLabel>:
    canvas.before:
        Color:
            rgba: 0.8, 0.8, 0.8, 0.5
        Rectangle:
            size: self.size
            pos: self.pos
        #Line:
        #    width: 2
        #    rectangle: self.x, self.y, self.width, self.height

<SaveGifPopup>:
    duration: 5.
    fileName: "resultat"
    animwidth: 12.
    animheight: 7.
    auto_dismiss: True
    size_hint_x: 0.5
    size_hint_y: 0.5
    title: "Guarda video"

    BoxLayout:
        padding: 20
        spacing: 10
        orientation: "vertical"

        ColoredLabel:
            text: "Es guardarà una animació de l'evolució\n a partir del moment actual"
        BoxLayout:
            orientation:"horizontal"
            Label:
                text: "Duració real:\n(segons)"
            DataInput:
                holder: root
                attribute: "duration"
                condition: "positive"
                id: duration
            Label:
                text: "Nom output:"
            DataInput:
                holder: root
                attribute: "fileName"
                condition: "notNothing"
                id: fileName
        GridLayout:
            cols: 2
            rows: 2
            Label:
                text: "Amplada (in):"
            DataInput:
                holder: root
                attribute: "animwidth"
                condition: "range-1-15"
            Label:
                text: "Alçada (in):"
            DataInput:
                holder: root
                attribute: "animheight"
                condition: "range-1-15"

        GridLayout:
            cols:3
            Button:
                text:"Crea .gif"
                on_release:
                    root.saveAnimation(root.fileName, root.duration, "gif")
                    root.dismiss()
            Button:
                text:"Crea .mp4"
                on_release:
                    root.saveAnimation(root.fileName, root.duration, "mp4")
                    root.dismiss()
            Button:
                text:"Tira enrere"
                on_release:
                    root.dismiss()

<ParametersPopup>:
# PROBLEM WITH POPUPS: Data gets reset after opening and closing?
    auto_dismiss: True # default should be true regardless
    size_hint_y: 0.9
    size_hint_x: 0.9
    title: "Configuració"#: ENTER per efectuar canvis"

    BoxLayout:
        orientation: "vertical"
        spacing: 5
        size: self.parent.width, self.parent.height

        GridLayout:
            size_hint_y: None
            height: 150
            cols:2
            Label:
                size_hint_x:0.7
                text: "Funcions poden dependre de x, y, t. Es pot fer servir radi r\nPotències amb **, no ^. Es poden incloure var. glob amb {nomVar}\nEs poden fer ifs suaus amb heaviside(x,k), k més gran vol dir menys suau\nA parts: F1 if COND1 else (F2 if COND2 else (... (Fn if CONDn else F)...)"
            Button:
                size_hint_x:0.3
                text: "Variables\nGlobals"
                on_release:
                    Factory.GlobalVariablesPopup(root.window).open()

        GridLayout:
            cols: 2

            GridLayout:
                size_hint_x: None
                width: 200
                rows: 3
                Label:
                    text: "Potencial:"
                Button:
                    text: "Aplica canvi"
                    on_release:
                        root.setPotential()
#                        if(root.ids.potential.on_text_validate()==0):
#                            root.window.QSystem.potential = root.window.potential
#                            root.window.animation.reset_plot()
                Button:
                    text: "Previsualitza"
                    on_release:
                        root.previewPotential()
#                        copy = root.window.potential
#                        copyDef = root.window.potentialDef
#
#                        if(root.ids.potential.on_text_validate()==0):
#                            root.window.QSystem.setPotential(root.window.potential)
#
#                            root.window.potential = copy
#                            root.window.potentialDef = copyDef
#
#                            root.window.tempState["psi"] = root.window.QSystem.psiMod
#                            Factory.PlotPopup(root.window.tempState).open()

            FunctionInput:
                id: potential
                holder: root.window
                functionName: "potential"
                definitionName: "potentialDef"
                varDict: root.window.variablesDict
                jit: True

            GridLayout:
                size_hint_x: None
                width: 200
                rows: 3
                Label:
                    text: "Estat Inicial:"
                Button:
                    text: "Aplica canvi"
                    on_release:
                        root.setInitState()
#                        if(root.ids.initState.on_text_validate()==0):
#                            root.window.QSystem.setState(root.window.initState)
#                            root.window.animation.reset_plot()

                Button:             # SOMEWHAT DUPLICATE CODE WITH POTENTIAL
                    text: "Previsualitza"
                    on_release:
                        root.previewInitState()
#                        copy = root.window.initState
#                        copyDef = root.window.initStateDef
#
#                        if(root.ids.initState.on_text_validate()==0):
#                            root.window.QSystem.setTempState(root.window.initState)
#
#                            root.window.initState = copy
#                            root.window.initStateDef = copyDef
#
#                            root.window.tempState["psi"] = root.window.QSystem.psiCopy
#                            Factory.PlotPopup(root.window.tempState).open()

            FunctionInput:
                id: initState
                holder: root.window
                functionName: "initState"
                definitionName: "initStateDef"
                varDict: root.window.variablesDict

        GridLayout:
            cols:2
            GridLayout:
                cols: 2
                Button:
                    text: "Nou Sistema"
                    on_release:
                        root.window.newSystem()
                GridLayout:
                    rows: 2
                    Label:
                        text: "Nx:"
                    DataInput:
                        holder: root.window
                        attribute: "Nx"
                        condition: "range-4-10000"
                        id: Nx
                    Label:
                        text: "Ny:"
                    DataInput:
                        holder: root.window
                        attribute: "Ny"
                        condition: "range-4-10000"
                        confirm:
                        id: Ny
            GridLayout:
                rows: 2
                cols: 4
                Label:
                    text: "x0:"
                DataInput:
                    holder: root.window
                    attribute: "x0"
                    id: x0
                Label:
                    text: "xf:"
                DataInput:
                    holder: root.window
                    attribute: "xf"
                    id: xf
                Label:
                    text: "y0:"
                DataInput:
                    holder: root.window
                    attribute: "y0"
                    id: y0
                Label:
                    text: "yf:"
                DataInput:
                    holder: root.window
                    attribute: "yf"
                    id: yf
            ################## Change all at once

            GridLayout:
                rows: 1
                cols: 3
                Label:
                    text: "dtSimul:"
                DataInput:
                    #attribute: root.window.animation.dtSim
                    holder: root.window.animation
                    attribute: "dtSim"
                    id: dtSim
                ToggleButton:
                    text: "Pas Imaginari\n(* i)"
                    state: 'down' if root.window.animation.imagdt else 'normal'
                    on_press:
                        root.window.animation.imagdt = not root.window.animation.imagdt
            GridLayout:
                cols:4
                Label:
                    text: "steps/Frame\n(0 real time):"
                DataInput:
                    holder: root.window.animation
                    attribute: "stepsPerFrame"
                    condition: "nonnegative"
                    id: stepsPerFrame

                Label:
                    text: "t:"
                DataInput:
                    holder: root.window.animation.QSystem
                    attribute: "t"
                    id: t

            GridLayout:
                cols: 4

                Button:
                    text:"Simulació i\nDebugging"
                    on_release: Factory.DebugPopup(root.window).open()

<DebugPopup>:
    title:""
    size_hint: 0.7, 0.7
    BoxLayout:
        orientation: "vertical"
        GridLayout:
            adi: adi
            exact: exact
            eigen: eigen
            cols: 4
            Label:
                text: "Mètodes de\nsimulació"
            ToggleButton:
                id: adi
                text: "Crank-Nic ràpid\nADI (altern. dir.)"
                state: 'down' if root.window.QSystem.step == 'fastest' else 'normal'
                on_press:
                    root.window.QSystem.step = 'fastest'
                    exact.state = 'normal'
                    eigen.state = 'normal'
            ToggleButton:
                id: exact
                text: "Crank-Nic exacte\n(molt lent)"
                state: 'down' if root.window.QSystem.step == 'exact' else 'normal'
                on_press:
                    root.window.QSystem.step = 'exact'
                    adi.state = 'normal'
                    eigen.state = 'normal'
            ToggleButton:
                id: eigen
                text: "Crank-Nic amb\nEigenvectors K"
                state: 'down' if root.window.QSystem.step == 'eigen' else 'normal'
                on_press:
                    root.window.QSystem.step = 'eigen'
                    adi.state = 'normal'
                    exact.state = 'normal'
        GridLayout:
            cols: 4
            Button:
                id: renorm
                text: "Renormalitza"
                on_release:
                    root.window.QSystem.renorm()
            ToggleButton:
                text: "Renormalitza\ncada pas"
                state: 'down' if root.window.QSystem.renormStep else 'normal'
                on_press:
                    root.window.QSystem.renormStep = not root.window.QSystem.renormStep

            Label:
                text: "Mostra Norma"
            CheckBox:
                active: root.window.animation.showNorm
                on_active: root.window.animation.reset_plot(showNorm=self.active)

        GridLayout:
            cols: 3
            Button:
                id: eigen
                text: "Eigenstates"
                on_release:
                    root.window.stopPlaying()
                    Factory.SavedEigenstatesPopup(root.window).open()
                    #root.QSystem.approximateEigenstate()
                    #root.animation.manualUpdate(onlyDraw=True)
            ToggleButton:
                text: "Rescala psi\ncada pas"
                state: 'down' if root.window.animation.scalePsi else 'normal'
                on_press:
                    root.window.animation.reset_plot(scalePsi=not root.window.animation.scalePsi, forceRecreate=True)
            ToggleButton:
                text: "Rescala moment\ncada pas"
                state: 'down' if root.window.animation.scaleMom else 'normal'
                on_press:
                    root.window.animation.reset_plot(scaleMom = not root.window.animation.scaleMom, forceRecreate=True)


<WindowManager>:
    MainScreen
    SandboxScreen
    ExamplesScreen
    GamesScreen
    PlayScreen

<MainScreen>:
    name: "main"
    BoxLayout:
        orientation: "vertical"
        BoxLayout:
            size_hint_y: 0.2
            Label:
                text: "[QUANTUM~MOVEMENT]"

        BoxLayout:
            size_hint_y: 0.7
            size_hint_x: 0.4
            pos_hint: {"center_x": 0.5}

            orientation: "vertical"
            padding:20
            spacing:dp(25)
            RoundedButton:
                size_hint_min_x: dp(200)
                height: dp(50)
                text: "SANDBOX"
                on_release:
                    root.manager.transition.direction = "left"
                    app.root.current = "sandbox"
            RoundedButton:
                size_hint_min_x: dp(200)
                height: dp(50)
                text: "JOCS"
                on_release:
                    root.manager.transition.direction = "left"
                    app.root.current = "games"
            RoundedButton:
                size_hint_min_x: dp(200)
                height: dp(50)
                text: "EXEMPLES"
                on_release:
                    root.manager.transition.direction = "left"
                    app.root.current = "examples"

        BoxLayout:
            orientation: "horizontal"
            size_hint_y: 0.1
#            Label:
#                text: "Joan Ainaud Fondevila"
#            BoxLayout:
#                size_hint_x: 0.3
#                Label:
#                    text: "Gràfics Ràpids?\n(pot haver glitch visual)"
#                FastGraphicsCheckbox:
#                    active: True


<SandboxScreen>
    name: "sandbox"
    settingsButton: settingsButton
    FloatLayout:
        BoxLayout:
            orientation: "vertical"

            BoxLayout:
                id: plot
                size_hint: 1, 0.8
                padding:5


            BoxLayout:
                orientation: "horizontal"
                size_hint: 1, 0.2
                cols: 1

                padding: 10
                spacing: 20
                SettingsButton:
                    #size_hint_y: None
                    id: settingsButton
                    #text: "Paràmetres"
                    on_release:
                        root.stopPlaying()
                        Factory.ParametersPopup(root).open()
                        #print(root.dropdown.attach_to.text) #It is indeed linked?

                        #print(root.dropdown.ids)
                GridLayout:
                    rows:3
                    Button:
                        id: resetButton
                        text: "Neteja/Reset"
                        on_release:
                            root.animation.reset_lists()
                            root.animation.frame=0
                            root.animation.reset_plot(forceRecreate=True, drawClassical=root.animation.drawClassical)

                    GridLayout:
                        cols: 2
                        ToggleButton:
                            id: showclassical
                            text: "Part. Clàssica"
                            state: 'down' if root.animation.drawClassical else 'normal'
                            on_press:
                                root.animation.reset_plot(drawClassical=not root.animation.drawClassical)
                        ToggleButton:
                            size_hint_x: 0.2
                            id: showclassicaltrace
                            text: "--"
                            state: 'down' if root.animation.drawClassicalTrace else 'normal'
                            on_press:
                                root.animation.reset_plot(drawClassicalTrace=not root.animation.drawClassicalTrace)
                    GridLayout:
                        cols: 2
                        ToggleButton:
                            id: showexpected
                            text: "Pos. esperada"
                            state: 'down' if root.animation.drawExpected else 'normal'
                            on_press:
                                root.animation.reset_plot(drawExpected=not root.animation.drawExpected)
                        ToggleButton:
                            size_hint_x: 0.2
                            id: showexpectedtrace
                            text: "--"
                            state: 'down' if root.animation.drawExpectedTrace else 'normal'
                            on_press:
                                root.animation.reset_plot(drawExpectedTrace=not root.animation.drawExpectedTrace)

                GridLayout:
                    rows: 3
                    Button:
                        id: saveState
                        text :"Guarda Estat"
                        on_release:
                            root.saveState()
                    TextInput:
                        id: stateName
                        multiline: False
                        text: "est0"
                    Button:
                        id: savedStates
                        text :"Estats Guardats"
                        on_release:
                            Factory.SavedStatesPopup(root).open()
                GridLayout:
                    rows: 2

                    PlayButton:
                        id: pausePlay
                        #text: "Play/Pause"
                        state: 'normal' if root.paused else 'down'
                        on_press:
                            root.startPlaying() if root.paused else root.stopPlaying()
                    SaveButton:
                        id: saveGif
                        #text: "Guarda animació"
                        on_release:
                            root.stopPlaying()
                            Factory.SaveGifPopup(root).open()
                            #print(root.dropdown.attach_to.text) #It is indeed linked?

                            #print(root.dropdown.ids)

                HomeButton:
                    #text: "Retorna al\nmenu d'inici"
                    on_release:
                        root.manager.transition.direction = "right"
                        root.stopPlaying()
                        app.root.current = "main"


### Show or hide Energy/Norm/Etc
#        BoolCheckBox:
#            active: True
#            pos_hint: {'right': 1, 'y': 0.85}
#            on_active: root.animation.reset_plot(showEnergy=self.active)
#        BoolCheckBox:
#            active: True
#            pos_hint: {'right': 1, 'y': 0.60}
#            on_active: root.animation.reset_plot(showNorm=self.active)
#        BoolCheckBox:
#            active: True
#            pos_hint: {'right': 1, 'y': 0.35}
#            on_active: root.animation.reset_plot(showMomentum=self.active)


<GamesScreen>:
    name: "games"
    BoxLayout:
        orientation: "vertical"
        padding: 20
        spacing: 20
        BoxLayout:
            size_hint:1,0.3
            Label:
                size_hint: 1, 0.5
                text:"Jocs"
        GridLayout:
            id: gameSelect
            rows: 1
            spacing: 40

        BoxLayout:
            size_hint: 1, 0.15
            orientation: "horizontal"
            HomeButton:
                #text: "Return to main screen"
                on_release:
                    root.manager.transition.direction = "right"
                    app.root.current = "main"

<ExamplesScreen>:
    name: "examples"
    BoxLayout:
        orientation: "vertical"
        padding: 20
        spacing: 20
        Label:
            size_hint: 1, 0.15
            text:"Exemples"
        GridLayout:
            id: exampselect
            rows: 2
            spacing: 40

        BoxLayout:
            size_hint: 1, 0.15
            orientation: "horizontal"
            HomeButton:
                #text: "Return to main screen"
                on_release:
                    root.manager.transition.direction = "right"
                    app.root.current = "main"


<PlayScreen>:
    name: "playscreen"

